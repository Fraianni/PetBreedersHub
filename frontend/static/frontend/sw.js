/*! For license information please see sw.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./src/sw.js":()=>{eval("const CACHE_NAME = 'v1';\nconst manifest = [{'revision':'a2b7743c48d052ed0ae5ce2474c859e4','url':'icons/icon-192-192.png'},{'revision':'a2b7743c48d052ed0ae5ce2474c859e4','url':'icons/icon-192x192.png'},{'revision':'a134a3eff401392aec6204463bad1854','url':'icons/icon-512x512.png'},{'revision':'b354707e30ea8a4cea561680c2ab2cdc','url':'main.css'},{'revision':'90c9dea529202d2634c957bc70bb5430','url':'main.js.LICENSE.txt'},{'revision':'d9d975cebe2ec20b6c652e1e4c12ccf0','url':'manifest.json'},{'revision':'d3e07d3832ba27abcf06d7febb19c9c8','url':'sw.js.LICENSE.txt'}];\nif (manifest) {\n  // do nothing\n}\nconst urlsToCache = ['/static/media/logo.png'];\n\n// Installazione del Service Worker\nself.addEventListener(\"install\", event => {\n  console.log(\"Service Worker installing...\");\n  event.waitUntil(caches.open(CACHE_NAME).then(cache => {\n    console.log('Opened cache');\n    return Promise.all(urlsToCache.map(url => {\n      return cache.add(url).catch(err => {\n        console.error('Failed to cache:', url, err);\n      });\n    }));\n  }));\n});\n\n// Attivazione del Service Worker\nself.addEventListener('activate', event => {\n  console.log('Service Worker activating...');\n  event.waitUntil(caches.keys().then(cacheNames => {\n    return Promise.all(cacheNames.map(cacheName => {\n      if (cacheName !== CACHE_NAME) {\n        console.log('Deleting old cache:', cacheName);\n        return caches.delete(cacheName);\n      }\n    }));\n  }));\n});\n\n// self.addEventListener(\"fetch\", (event) => {\n//     event.respondWith(\n//         caches.match(event.request).then((response) => {\n//             // Se la risposta è presente nella cache, restituiscila\n//             if (response) {\n//                 return response;\n//             }\n\n//             // Altrimenti, effettua la fetch e gestisci la risposta\n//             return fetch(event.request).then((fetchResponse) => {\n//                 // Controlla se la risposta è un reindirizzamento\n//                 if (fetchResponse.redirected) {\n//                     // Se la risposta è un reindirizzamento, puoi decidere di seguire il reindirizzamento o meno\n//                     return fetch(fetchResponse.url).then((finalResponse) => {\n//                         return caches.open(CACHE_NAME).then((cache) => {\n//                             cache.put(event.request, finalResponse.clone());\n//                             return finalResponse;\n//                         });\n//                     });\n//                 }\n\n//                 // Se non è un reindirizzamento, memorizza la risposta nella cache\n//                 return caches.open(CACHE_NAME).then((cache) => {\n//                     cache.put(event.request, fetchResponse.clone());\n//                     return fetchResponse;\n//                 });\n//             });\n//         })\n//     );\n// });\n\n// Gestione delle notifiche push\nself.addEventListener('push', function (event) {\n  const data = event.data ? event.data.json() : {};\n  console.log('Push Received...', data);\n  const options = {\n    body: data.body || 'Default body message',\n    // Messaggio di default\n    icon: '/static/icons/icon-192x192.png',\n    badge: '/static/icons/icon-192x192.png'\n    // Puoi aggiungere ulteriori opzioni come 'data' se vuoi\n  };\n  const title = data.title || 'Default Title';\n\n  // Personalizza il messaggio con i dati del profilo utente\n  if (data.first_name && data.last_name) {\n    options.body = `${data.first_name} ${data.last_name}: ${options.body}`;\n  }\n  event.waitUntil(self.registration.showNotification(title, options));\n});\nself.addEventListener('notificationclick', function (event) {\n  console.log('Notification clicked:', event);\n  event.notification.close(); // Close the notification\n  const isLocal = self.location.hostname === '127.0.0.1' || self.location.hostname === 'localhost';\n  const baseUrl = isLocal ? 'https://127.0.0.1:8000' : 'https://asfaltizaccardi.horaceweb.it/';\n  const urlToOpen = `${baseUrl}/home/`;\n  event.waitUntil(clients.matchAll({\n    type: 'window'\n  }).then(windowClients => {\n    const client = windowClients.find(c => c.url === urlToOpen && 'focus' in c);\n    if (client) {\n      console.log('Focusing existing window:', client.url);\n      return client.focus();\n    }\n    console.log('Opening new window:', urlToOpen);\n    return self.clients.openWindow(urlToOpen); // Usa self.clients\n  }));\n});\n\n//# sourceURL=webpack://frontend/./src/sw.js?")}},__webpack_exports__={};__webpack_modules__["./src/sw.js"]()})();